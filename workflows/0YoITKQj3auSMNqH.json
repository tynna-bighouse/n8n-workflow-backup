{
  "active": true,
  "connections": {
    "Google Gemini Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Aggregate": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "改文件名",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert to File": {
      "main": [
        []
      ]
    },
    "obsidian请求节点": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "改文件名": {
      "main": [
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "obsidian请求节点",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "obsidian请求节点1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "obsidian请求节点1": {
      "main": [
        [
          {
            "node": "Aggregate",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2025-09-08T11:24:23.511Z",
  "id": "0YoITKQj3auSMNqH",
  "isArchived": false,
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "name": "obsidian周报自动生成器",
  "nodes": [
    {
      "parameters": {
        "method": "POST",
        "url": "=https://host.docker.internal:27124/vault/{{encodeURIComponent(\"周总结/\" + \"周报-\" + $now.toFormat(\"kkkk-'W'WW\") + \".md\")}}",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpBearerAuth",
        "sendBody": true,
        "contentType": "raw",
        "rawContentType": "text/markdown",
        "body": "={{ $json.output }}",
        "options": {
          "allowUnauthorizedCerts": true,
          "response": {
            "response": {
              "fullResponse": true
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1552,
        -96
      ],
      "id": "9240cba0-cf38-40eb-91d3-5768d3368d21",
      "name": "HTTP Request",
      "alwaysOutputData": true,
      "credentials": {
        "httpBearerAuth": {
          "id": "fIOwv6biNqkbQECz",
          "name": "Bearer Auth account Obsidian"
        }
      }
    },
    {
      "parameters": {
        "modelName": "models/gemini-2.5-pro",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        704,
        160
      ],
      "id": "a4a8c7f3-42c3-4140-a319-bcfa4c3a0143",
      "name": "Google Gemini Chat Model",
      "credentials": {
        "googlePalmApi": {
          "id": "bXt3B2tQFHbAwxOD",
          "name": "Google Gemini(PaLM) Api account egingin"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=# Role\n假如你是我。请完全代入我的角色进行输出，你的回答就应该是周记本身。\n\n# Task\n根据input的日记内容写一段周记，总结我这个星期的主要活动、工作进度，心情和睡眠情况。\n字数在400字左右\n\n# Style & Tone\n- 模仿我提供的日记口吻，风格要年轻化，可以适当加 emoji。\n- 排版舒服。\n- 主要活动、工作进度，心情和睡眠情况等所有的这些标题要用英语\n\n# Format\n- 以 Markdown 格式输出。\n\n# Critical Instruction (关键指令！)\n请直接输出周记内容，不要包含任何额外的解释或对话。\n\n# Input Data\n {{ $json.data }}",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        912,
        -64
      ],
      "id": "5c0682da-022b-4450-9bd1-65d6bf81acd0",
      "name": "AI Agent"
    },
    {
      "parameters": {
        "fieldsToAggregate": {
          "fieldToAggregate": [
            {
              "fieldToAggregate": "data"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.aggregate",
      "typeVersion": 1,
      "position": [
        624,
        -48
      ],
      "id": "36569248-a1f1-41c4-9195-842b1bb2d97f",
      "name": "Aggregate"
    },
    {
      "parameters": {
        "operation": "toText",
        "sourceProperty": "output",
        "binaryPropertyName": "=data",
        "options": {
          "fileName": "=周记-{{$now.minus({ weeks: 1 }).toFormat(\"kkkk-'W'WW\")}}.md"
        }
      },
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        1328,
        -288
      ],
      "id": "114e569c-ea07-409d-8e6f-fe8e587bcbe8",
      "name": "Convert to File"
    },
    {
      "parameters": {
        "url": "=https://host.docker.internal:27124/vault/日记/",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpBearerAuth",
        "options": {
          "allowUnauthorizedCerts": true,
          "response": {
            "response": {}
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        224,
        -16
      ],
      "id": "f2aaaf26-cfd7-4ffe-a6ba-563cccbc7f3a",
      "name": "obsidian请求节点",
      "credentials": {
        "httpBearerAuth": {
          "id": "fIOwv6biNqkbQECz",
          "name": "Bearer Auth account Obsidian"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "ec2fb318-12b3-4cfa-9dfa-ce5951465486",
              "name": "output",
              "value": "={{ $json.output }}",
              "type": "string"
            },
            {
              "id": "41789bb9-206d-4802-b072-b67a25f4c59d",
              "name": "File Name",
              "value": "=周记-{{$now.minus({ weeks: 1 }).toFormat(\"kkkk-'W'WW\")}}.md",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1264,
        -64
      ],
      "id": "7dae958c-39fc-4bde-8303-b9ba6434ca74",
      "name": "改文件名"
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "weeks",
              "triggerAtDay": [
                1
              ],
              "triggerAtHour": 11
            }
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        0,
        0
      ],
      "id": "318ce0e2-472c-435a-9498-81334325208f",
      "name": "Schedule Trigger"
    },
    {
      "parameters": {
        "url": "=https://host.docker.internal:27124/vault/{{ $json.path }}",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpBearerAuth",
        "options": {
          "allowUnauthorizedCerts": true,
          "response": {
            "response": {}
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        528,
        64
      ],
      "id": "baa7b3e0-307c-4df7-b297-bfa1dc656e7b",
      "name": "obsidian请求节点1",
      "credentials": {
        "httpBearerAuth": {
          "id": "fIOwv6biNqkbQECz",
          "name": "Bearer Auth account Obsidian"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// 获取上游HTTP节点返回的文件列表\nconst input = $input.first().json;\nlet files = [];\n\n// 处理Obsidian API可能的不同返回格式\nif (Array.isArray(input)) {\n  files = input;\n} else if (input.files) {\n  files = input.files;\n} else if (input.data) {\n  files = input.data;\n} else if (input.children) {\n  files = input.children;\n}\n\nconsole.log('原始文件列表:', files);\n\n// 计算上周的日期范围（周一到周日）\nconst now = new Date();\nconst weekdayMon0 = (now.getDay() + 6) % 7; // 将周一设为0\nconst thisMon = new Date(now);\nthisMon.setDate(now.getDate() - weekdayMon0);\nthisMon.setHours(0, 0, 0, 0);\n\n// 上周一\nconst lastMon = new Date(thisMon);\nlastMon.setDate(thisMon.getDate() - 7);\n\n// 生成上周7天的日期字符串集合\nconst lastWeekDates = new Set();\nfor (let i = 0; i < 7; i++) {\n  const d = new Date(lastMon);\n  d.setDate(lastMon.getDate() + i);\n  const dateStr = d.getFullYear() + '-' + \n    String(d.getMonth() + 1).padStart(2, '0') + '-' + \n    String(d.getDate()).padStart(2, '0');\n  lastWeekDates.add(dateStr);\n}\n\nconsole.log('上周日期范围:', Array.from(lastWeekDates));\n\n// 筛选出上周的日记文件（假设文件名格式为 YYYY-MM-DD.md）\nconst lastWeekDiaries = [];\n\nfiles.forEach(file => {\n  // 处理不同的文件对象格式\n  const fileName = file.name || file.title || file;\n  \n  if (typeof fileName === 'string') {\n    // 匹配日期格式 YYYY-MM-DD.md\n    const match = fileName.match(/^(\\d{4}-\\d{2}-\\d{2})\\.md$/);\n    \n    if (match) {\n      const dateStr = match[1];\n      if (lastWeekDates.has(dateStr)) {\n        lastWeekDiaries.push({\n          json: {\n            fileName: fileName,\n            date: dateStr,\n            path: `日记/${fileName}`,\n            fullPath: `日记/${fileName}`\n          }\n        });\n      }\n    }\n  }\n});\n\nconsole.log(`找到 ${lastWeekDiaries.length} 个上周的日记文件:`, lastWeekDiaries.map(d => d.json.fileName));\n\n// 如果没找到任何文件，返回空数组但不报错\nif (lastWeekDiaries.length === 0) {\n  console.log('上周没有找到任何日记文件');\n  return [{\n    json: {\n      message: '上周没有找到任何日记文件',\n      lastWeekDates: Array.from(lastWeekDates)\n    }\n  }];\n}\n\nreturn lastWeekDiaries;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        320,
        208
      ],
      "id": "6ae0658c-76b6-427f-9c82-2f2fd8a8069a",
      "name": "Code"
    }
  ],
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": {
    "node:Schedule Trigger": {
      "recurrenceRules": []
    }
  },
  "tags": [],
  "triggerCount": 1,
  "updatedAt": "2025-09-22T03:46:49.000Z",
  "versionId": "67e39d47-5788-4e5f-9a22-880c887b06b6"
}